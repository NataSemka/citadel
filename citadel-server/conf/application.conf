# Uncomment this for the most verbose Akka debugging:
akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    debug {
      receive = on
      #autoreceive = on
      #lifecycle = on
    }
  }
}


# https://www.playframework.com/documentation/latest/SecurityHeaders
# Connect to localhost:9000 for content security policy on websockets
play.filters.headers {
  contentSecurityPolicy = "connect-src 'self' ws://localhost:9000"
}

# https://www.playframework.com/documentation/latest/AllowedHostsFilter
# Allow requests to localhost:9000.
play.filters.hosts {
  allowed = ["localhost:9000"]
}

play.modules.enabled += org.natasemka.citadel.server.Module
play.http.errorHandler = org.natasemka.citadel.server.ErrorHandler

default.stocks = ["GOOG", "AAPL", "ORCL"]

sentiment.url = "http://text-processing.com/api/sentiment/"

tweet.url = "http://twitter-search-proxy.herokuapp.com/search/tweets?q=%%24%s"

akka {
  # akka logging options: OFF, ERROR, WARNING, INFO, DEBUG
  #   stdout-loglevel = "OFF"
  loglevel = OFF
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
    debug {
      # enable function of LoggingReceive, which is to log any received message at DEBUG level
      receive = ON
      lifecycle = ON
    }
    #  serializers {
    #    java = "akka.serialization.JavaSerializer"
    #  }
    #  serialization-bindings {
    #    "messages.InternalMsg" = java
    #  }
  }

  remote {
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      hostname = "localhost"
      port = 0
    }
  }

  #  cluster {
  #  seed-nodes = [
  #   "akka.tcp://application@127.0.0.1:7552"]
  #   "akka.tcp://application@127.0.0.1:2533"]
  #   "akka.tcp://application@127.0.0.1:2553"]
  # }
  extensions = ["akka.cluster.pubsub.DistributedPubSub"]
}